buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
		mavenCentral()
	}
	dependencies {
		classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.30.0"
		classpath "gradle.plugin.com.github.gradle-git-version-calculator:gradle-git-version-calculator:1.1.0"
	}
}

plugins {
	id 'io.codearte.nexus-staging' version '0.30.0'
	id "com.github.ben-manes.versions" version "0.52.0"
	id "se.ascp.gradle.gradle-versions-filter" version "0.1.16"
}

ext {
	publish_user = project.hasProperty('publish_user') ? project.getProperty('publish_user') : ''
	publish_pass = project.hasProperty('publish_pass') ? project.getProperty('publish_pass') : ''
}

def generateBaseName(artifact_id) {
	return "paseto-" + artifact_id
}

nexusStaging {
	username = publish_user
	password = publish_pass
}

allprojects {
	apply plugin: 'java-library'
	apply plugin: 'com.github.gradle-git-version-calculator'
	apply plugin: 'jacoco'

	gitVersionCalculator {
		prefix = 'release@'
		withSnapshot = true
	}

	repositories {
		mavenLocal()
		mavenCentral()
	}

	jar {
		archiveVersion = gitVersionCalculator.calculateVersion()
	}

	jacoco {
		toolVersion = "0.8.13"
	}

	if (it.name != "paseto") {

		apply plugin: 'signing'
		apply plugin: 'maven-publish'

		afterEvaluate {
			signing {
				sign publishing.publications.maven
			}
		}

		publishing {
			publications {
				group = "net.aholbrook.paseto"
				version = gitVersionCalculator.calculateVersion()

				maven(MavenPublication) {
					pom {
						url = 'https://github.com/atholbro/paseto'

						licenses {
							license {
								name = 'The MIT License (MIT)'
								url = 'http://opensource.org/licenses/MIT'
							}
						}

						developers {
							developer {
								id = 'aholbrook'
								name = 'Andrew Holbrook'
								email = 'atholbro@gmail.com'
							}
						}

						scm {
							connection = 'scm:git:git@github.com:atholbro/paseto.git'
							developerConnection = 'scm:git:git@github.com:atholbro/paseto.git'
							url = 'https://github.com/atholbro/paseto'
						}


					}
				}
			}
			repositories {
				maven {
					def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
					def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
					url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

					credentials {
						username publish_user
						password publish_pass
					}
				}
			}
		}
	}

	tasks.withType(Test).configureEach {
		// maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
		outputs.upToDateWhen { false }

		useJUnitPlatform()

		testLogging {
			events "failed", "skipped"
			showExceptions true
			exceptionFormat "full"
			showCauses true
			showStackTraces true
			showStandardStreams true
		}
	}
}

subprojects {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11

	tasks.register('sourcesJar', Jar) {
		from sourceSets.main.allJava
		archiveClassifier.set('sources')
	}

	tasks.register('javadocJar', Jar) {
		from tasks.named('javadoc')
		archiveClassifier.set('javadoc')
	}

	artifacts {
		archives tasks.named('sourcesJar')
		archives tasks.named('javadocJar')
	}

	tasks.withType(Javadoc).configureEach {
		options.addStringOption('Xdoclint:none', '-quiet')
	}
}

task allDependencies {
	subprojects.each { dependsOn("${it.name}:dependencies") }
}

task codeCoverageReport(type: JacocoReport) {
	executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

	subprojects.each {
		sourceSets it.sourceSets.main
	}

	reports {
		xml.required.set(true)
		xml.outputLocation.set(file("${buildDir}/reports/jacoco/report.xml"))
		html.required.set(false)
		csv.required.set(false)
	}

	onlyIf = { true }

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'net/aholbrook/paseto/time/**',
					'net/aholbrook/paseto/encoding/json/jackson/mixin/**'
			])
		}))
	}
}

codeCoverageReport.dependsOn {
	subprojects*.test
}
